name: TA Exercise - Terraform / Ansible automation 
on: [ push ]    
jobs:
  # This first job is there to deploy the infrastructure with Terraform
  terraform-deployment:
    runs-on: ubuntu-latest
    steps: 
      - name: Authenticating with AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Clone your code in the pipeline
        uses: actions/checkout@v2

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_wrapper: false # this here is needed so that we can access the output ec2 instance public ip terraform output

      - name: Init
        id: init
        run: terraform init

      - name: Plan
        id: plan
        run: terraform plan
        continue-on-error: true

      - name: Apply
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true

      - name: Saving tf output
        run: 
          terraform output ec2_instance_ip >> new_public_ip_address

      - name: Catting ip addr file
        run:
          new_ip = "`cat new_public_ip_address`"

      # Since the file now contains the IP we can invoke the following command to get the address without quotes:
      # sed 's/^"//;s/.$//' new_public_ip_address
      # This will "echo" the IP which we can copy into the config files for ansible

      # Files need updating:
      # inventory.hosts - 2nd line, IP addr without quotes
      # playbook_website.yml - 7th line, after the colon, IP addr with quotes

      - name: Populating files with new ip
        run:
          sed -i 's/ip_address_goes_here/$new_ip' inventory.hosts

      - name: Testing if it worked
        run:
          cat inventory.hosts

  